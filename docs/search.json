[
  {
    "objectID": "posts/Thomas_fire_post/Thomas_fire_post.html",
    "href": "posts/Thomas_fire_post/Thomas_fire_post.html",
    "title": "Impacts of the Thomas Fire",
    "section": "",
    "text": "The 2017 Thomas Fire in Santa Barbara and Ventura County, was one of the largest fires in California’s history with over 280,000 acres burned. By looking at the Air Quality Index and fire scares resulting from the fire, we can begin to visualize its devastating effects.\nView more information and additional data exploration located on my Github. View the full repository here\n\nCredit to Ray Ford/ Noozhawk\n\n\n\n\nThe purpose of this project is to analyze both AQI and landsat data from the Santa Barbara County area to explore the fire’s effects.\nFirst, we look at AQI data from 2017 and 2018, subsetting specifically for Santa Barbara County, and creating a rolling mean, which allows us to create a graph visualizing the spike is Air Quality Index at the time of the fire.\nSecond, we explore landsat data, using both true and false color imagery to show the benefits of using false color imagery. We used the landsat data, combined with the thomas_fire data to map the effects of the fire.\nHighlights include: - date and string data wrangling - visualizing time series - use of the .rolling function to find averages - use of .loc for spatial subsetting - use of .squeeze and .drop_vars to remove bands - load and explore data with rioxr.open_rasterio() - clip one dataset to another using .rio.clip_box - creation of true and false imagery - crs transformation\n\n\n\nThe AQI data is updated twice a year by the EPA. It contains Air Quality Index data by day, year, and county. It is from a collection of pregenerated data from outdoor monitors across the US. The data was retrieved from the EPA website\nThe landsat data is a simplified collection of bands (red, green, blue, near-infrared and shortwave infrared) from the Landsat Collection 2 Level-2 atmosperically corrected surface reflectance data, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer Data Catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nThe Thomas_fire data is a subset of the shapefile from California Fires (all) from Data.gov, which contains fire data for all of California. This data is updated annualy by The California Department of Forestry and Fire Protection’s Fire and Resource Assessment Program.\n\n\n\nMicrosoft Planetary Computer Data Catalogue, Landsat collection 2 Level-2. Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: December 3rd, 2024.\nData.gov Data Catalogue, California Fire Perimeters (all). Available from: https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436. Access date: December 3rd, 2024.\nAirData, US EPA. Available from: https://aqs.epa.gov/aqsweb/airdata/download_files.html. Access date: December 3rd, 2024\n\n\n\n\nAir Quality Index is determined by the concentrations of pollutants in the air, and has a range of values that determine health - Good (green): 0 to 50 - Moderate (yellow): 51 to 100 - Unhealthy for sensitive groups (orange): 101 to 150 - Unhealthy (red): 151 to 200 - Very unhealthy (purple): 201 to 300 - Hazardous (maroon): 300 +\nBy plotting the AQI of before, during, and after the Thomas Fire, we can view one of the fire’s important effects on people and the environment.\n\n\nLoad in the necessary packages to run our analysis\n\nimport os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport geopandas as gpd\nfrom shapely.geometry import Polygon\n\nimport rioxarray as rioxr\nimport xarray as xr\n\nRead in data for the Air Quality Index in 2017 and 2018 using pd to create PandasDataFrames\n\naqi_17 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip\", compression = 'zip')\naqi_18 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip\", compression = 'zip')\n\nWe currently have two separate data frames for two separate years. Combining them using the .concat pandas function allows us to “glue” the data together into one PandasDataFrame\n\n# Concatenate the two datasets to combine\naqi = pd.concat([aqi_17, aqi_18])\n\n\n\n\nChange column names to lower case and replace spaces with underscores for continuity and easier wrangling\n\n# Clean column names\naqi.columns = aqi.columns.str.lower().str.replace(' ','_')\n\n# Print column names to confirm lower snake case change\nprint(aqi.columns)\n\nIndex(['state_name', 'county_name', 'state_code', 'county_code', 'date', 'aqi',\n       'category', 'defining_parameter', 'defining_site',\n       'number_of_sites_reporting'],\n      dtype='object')\n\n\nTo effectively work with time series data, we need to make sure that the date column is set as a pd.datetime object. This ensures that python realizes that the date column corresponds to dates. We will then set the date column as the index to work with the time series data and easily plot it later on.\n\n# Change date column to datetime object\naqi.date = pd.to_datetime(aqi['date'])\n\n\n# Set date as index\naqi = aqi.set_index('date')\n\n\n\n\nWe actually only want to use a portion of the aqi dataset. We will subset the data for only Santa Barbara County because we are interested only in the effects of the Thomas Fire, which occured in that county.\n\n# Subset county_name\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\n\nCalculate the five day average of the AQI. We will do this using the .rolling() function, a lazy function that will allow us to calculate the mean over the given window. In this case we want to see the five day average. We will create a new column called five_day_average to keep this information in our dataframe.\n\naqi_sb.loc[:, 'five_day_average'] = aqi_sb['aqi'].rolling(window='5D').mean()\n\n\n\n\nWe will use .plot() to visualize the five day average and the daily AQI surrounding and during the Thomas Fire.\n\naqi_sb[['aqi', 'five_day_average']].plot()\n\n\n\n\n\n\n\n\nThe Thomas Fire burned in December 2017 through January 2018. When looking at that time frame on our plot, we can clearly see how the fire significantly drove up the AQI. This makes sense, as a large fire releases many contaminants into the air, driving up the index. Recalling back to the AQI index number indications, we can see that the five day average during the fire got above 200, which is very unhealthy. It even appears that the daily AQI reached over 300, putting it into the highest and most hazardous category.\n\n\n\n\nThe Landsat satellite has the ability to capture a collection of bands (red, green, blue, near-infrared and shortwave infrared) through data on reflected light. The appearance of each of these bands indicates the presence of different materials in the environment. Using false color imagery can help us visualize bands we cannot see with our naked eye, and better understand what they mean.\n\nCredit to NASA, ESA, Leah Hustak (STScI)\n\n\n\n# Read in fire data\npath = fp = os.path.join(\"data\",\"California_Fire_Perimeters_(all).shp\") \n\nperimeters = gpd.read_file(path) \n\n\n\n\n\n# Explore CRS\nprint(f\"ellipsoid: {perimeters.crs.ellipsoid}\")\nprint(f\"datum: {perimeters.crs.datum}\")\nprint(f\"crs: {perimeters.crs}\")\nprint(f\"{'Is the CRS geographic?:':&lt;25} {perimeters.crs.is_geographic}\")\nprint(f\"{'Is the CRS projected?:':&lt;25} {perimeters.crs.is_projected}\")\n\nellipsoid: WGS 84\ndatum: World Geodetic System 1984 ensemble\ncrs: EPSG:3857\nIs the CRS geographic?:   False\nIs the CRS projected?:    True\n\n\n\n\n\nWe don’t want fire data for the entire state, so let’s select only for the Thomas Fire in 2017\n\n# Select for only the Thomas Fire 2017\nthomas_fire = perimeters.loc[(perimeters['FIRE_NAME'] == \"THOMAS\") &\n                                 (perimeters['YEAR_'] == 2017)]\n\n\n\n\n\n# Load in landsat data using `os` and import it using `rioxr.open_rasterio()`\nroot = os.path.join('/',\n                  'courses',\n                  'EDS220',\n                  'data',\n                  'hwk4_landsat_data')\n\nfp = os.path.join(root,\n                 'landsat8-2018-01-26-sb-simplified.nc')\n\nlandsat = rioxr.open_rasterio(fp)\n\n\n# View landsat \nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\nBecause this data is an xarray, we can simply call landsat to see information about it. Its dimensions are x:870, y:731, with one band. The data variables are red, green, blue, nir08, swir22. We can see that there is only one band, so we can get rid of the band dimension\n\n# Drop band dimensions and remove coordinates associated to band\nlandsat = landsat.squeeze()\nlandsat = landsat.drop_vars('band')\n# Print to confirm results\nprint(landsat.dims, landsat.coords)\n\nFrozenMappingWarningOnValuesAccess({'x': 870, 'y': 731}) Coordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\n\n\n\n\n\nIndex the colors in the order to create a true color image\n\n# Add robust = True to view true color RGB image\nlandsat[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow(robust = True)\n\n\n\n\n\n\n\n\nWith the true color image, our entire plot looks very monochromatic. It’s not possible to see the effects of the Thomas Fire, as all of the land looks extremely similar. In order to get any information from our plot, we need to switch our image to false color.\n\n\n\n\nOur false color image will plot the short-wave infrared (swir22), near-infrared, and red variables (in that order).\n\n# Plot false color image\nlandsat[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(robust = True)\n\n\n\n\n\n\n\n\n\n\n\nCreate a map showing the shortwave infrared/near-infrared/red false color image together with the Thomas Fire. This will allow us to understand what fire scars we are seeing in the environment.\nWhenever we combine spatial data we have to check that the CRSs match, and reproject if they do not.\n\n# Examine CRss\nprint('thomas_fire CRS: ', thomas_fire.crs)\nprint('landsat CRS: ', landsat.rio.crs)\n\nthomas_fire CRS:  EPSG:3857\nlandsat CRS:  EPSG:32611\n\n\n\n# Reproject thomas_fire to landsat crs\nthomas_fire = thomas_fire.to_crs(landsat.rio.crs)\n\nIn addition to layering the perimeter data on top of the landsat data, we also want to “zoom in” on the area we are interested in. We will clip the landsat data to the Thomas fire bounds using .rio.clip_box()\n\n# Clip data\nlandsat_small = landsat.rio.clip_box(*thomas_fire.total_bounds)\n\nLet’s finally create a clean plot of our false color image.\n\n# Set aspect ratio\nlandsat_aspect_ratio = landsat.rio.width / landsat.rio.height\n\n# Plot clipped data\nfig, ax = plt.subplots(figsize=(6, 6 * landsat_aspect_ratio))  \nlandsat_small[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(robust = True, ax=ax)\nthomas_fire.boundary.plot(ax=ax, linewidth=1, edgecolor='black', label = \"Thomas Fire Perimeter\")\n\nax.set_axis_off()\nax.set_title('False Color Imagery Map of the 2017\\nThomas Fire in Ventura and Santa Barbara County')\nfig.text(0.5, 0.27, 'Data Source: CAL FIRE via Data.gov & Microsoft Planetary Computer Data Catalogue', ha='center', va='center', fontsize=8, color='black', fontstyle='italic') \nfig.text(0.5, 0.25, 'Date Accessed: 11/22/24', ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nax.legend(loc='upper right')\nfig.savefig('landsat_map_thomas_fire.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\n\nFalse color imagery is being used to show the scar from the 2017 Thomas Fire. We can see that the color is significantly different inside the Thomas Fire Perimeter. The difference in color indicates a difference in vegetation (ie. dead vs alive) which more easily shows us the effects of the Thomas Fire than a true color image would.\nLet’s break down the false color image:|\nThe red represents shortwave infrared wavelengths which is shown on the far right side of the figure, after the 2,000 nanometer mark. We can see that the shortwave infrared shows mostly dry soil. That means that where we are seeing red on our map, that is dry soil, meaning a lack of living vegetation.\nThe green represents near-infrared wavelengths, which is shown on the figure between wavelengths of 850 t0 880. We can see that the near-infrared wavelengths show mostly healthy vegetation. That means that where we are seeing green on our map, that is vegetation, meaning a lack of fire scars.\nThe blue represents red. We don’t see any blue in our image, so we do not need to worry about its reflectance."
  },
  {
    "objectID": "posts/Thomas_fire_post/Thomas_fire_post.html#about",
    "href": "posts/Thomas_fire_post/Thomas_fire_post.html#about",
    "title": "Impacts of the Thomas Fire",
    "section": "",
    "text": "The purpose of this project is to analyze both AQI and landsat data from the Santa Barbara County area to explore the fire’s effects.\nFirst, we look at AQI data from 2017 and 2018, subsetting specifically for Santa Barbara County, and creating a rolling mean, which allows us to create a graph visualizing the spike is Air Quality Index at the time of the fire.\nSecond, we explore landsat data, using both true and false color imagery to show the benefits of using false color imagery. We used the landsat data, combined with the thomas_fire data to map the effects of the fire.\nHighlights include: - date and string data wrangling - visualizing time series - use of the .rolling function to find averages - use of .loc for spatial subsetting - use of .squeeze and .drop_vars to remove bands - load and explore data with rioxr.open_rasterio() - clip one dataset to another using .rio.clip_box - creation of true and false imagery - crs transformation\n\n\n\nThe AQI data is updated twice a year by the EPA. It contains Air Quality Index data by day, year, and county. It is from a collection of pregenerated data from outdoor monitors across the US. The data was retrieved from the EPA website\nThe landsat data is a simplified collection of bands (red, green, blue, near-infrared and shortwave infrared) from the Landsat Collection 2 Level-2 atmosperically corrected surface reflectance data, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer Data Catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nThe Thomas_fire data is a subset of the shapefile from California Fires (all) from Data.gov, which contains fire data for all of California. This data is updated annualy by The California Department of Forestry and Fire Protection’s Fire and Resource Assessment Program.\n\n\n\nMicrosoft Planetary Computer Data Catalogue, Landsat collection 2 Level-2. Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: December 3rd, 2024.\nData.gov Data Catalogue, California Fire Perimeters (all). Available from: https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436. Access date: December 3rd, 2024.\nAirData, US EPA. Available from: https://aqs.epa.gov/aqsweb/airdata/download_files.html. Access date: December 3rd, 2024"
  },
  {
    "objectID": "posts/Thomas_fire_post/Thomas_fire_post.html#air-quality-index-during-thomas-fire",
    "href": "posts/Thomas_fire_post/Thomas_fire_post.html#air-quality-index-during-thomas-fire",
    "title": "Impacts of the Thomas Fire",
    "section": "",
    "text": "Air Quality Index is determined by the concentrations of pollutants in the air, and has a range of values that determine health - Good (green): 0 to 50 - Moderate (yellow): 51 to 100 - Unhealthy for sensitive groups (orange): 101 to 150 - Unhealthy (red): 151 to 200 - Very unhealthy (purple): 201 to 300 - Hazardous (maroon): 300 +\nBy plotting the AQI of before, during, and after the Thomas Fire, we can view one of the fire’s important effects on people and the environment.\n\n\nLoad in the necessary packages to run our analysis\n\nimport os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport geopandas as gpd\nfrom shapely.geometry import Polygon\n\nimport rioxarray as rioxr\nimport xarray as xr\n\nRead in data for the Air Quality Index in 2017 and 2018 using pd to create PandasDataFrames\n\naqi_17 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip\", compression = 'zip')\naqi_18 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip\", compression = 'zip')\n\nWe currently have two separate data frames for two separate years. Combining them using the .concat pandas function allows us to “glue” the data together into one PandasDataFrame\n\n# Concatenate the two datasets to combine\naqi = pd.concat([aqi_17, aqi_18])\n\n\n\n\nChange column names to lower case and replace spaces with underscores for continuity and easier wrangling\n\n# Clean column names\naqi.columns = aqi.columns.str.lower().str.replace(' ','_')\n\n# Print column names to confirm lower snake case change\nprint(aqi.columns)\n\nIndex(['state_name', 'county_name', 'state_code', 'county_code', 'date', 'aqi',\n       'category', 'defining_parameter', 'defining_site',\n       'number_of_sites_reporting'],\n      dtype='object')\n\n\nTo effectively work with time series data, we need to make sure that the date column is set as a pd.datetime object. This ensures that python realizes that the date column corresponds to dates. We will then set the date column as the index to work with the time series data and easily plot it later on.\n\n# Change date column to datetime object\naqi.date = pd.to_datetime(aqi['date'])\n\n\n# Set date as index\naqi = aqi.set_index('date')\n\n\n\n\nWe actually only want to use a portion of the aqi dataset. We will subset the data for only Santa Barbara County because we are interested only in the effects of the Thomas Fire, which occured in that county.\n\n# Subset county_name\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\n\nCalculate the five day average of the AQI. We will do this using the .rolling() function, a lazy function that will allow us to calculate the mean over the given window. In this case we want to see the five day average. We will create a new column called five_day_average to keep this information in our dataframe.\n\naqi_sb.loc[:, 'five_day_average'] = aqi_sb['aqi'].rolling(window='5D').mean()\n\n\n\n\nWe will use .plot() to visualize the five day average and the daily AQI surrounding and during the Thomas Fire.\n\naqi_sb[['aqi', 'five_day_average']].plot()\n\n\n\n\n\n\n\n\nThe Thomas Fire burned in December 2017 through January 2018. When looking at that time frame on our plot, we can clearly see how the fire significantly drove up the AQI. This makes sense, as a large fire releases many contaminants into the air, driving up the index. Recalling back to the AQI index number indications, we can see that the five day average during the fire got above 200, which is very unhealthy. It even appears that the daily AQI reached over 300, putting it into the highest and most hazardous category."
  },
  {
    "objectID": "posts/Thomas_fire_post/Thomas_fire_post.html#landsat-data-of-thomas-fire",
    "href": "posts/Thomas_fire_post/Thomas_fire_post.html#landsat-data-of-thomas-fire",
    "title": "Impacts of the Thomas Fire",
    "section": "",
    "text": "The Landsat satellite has the ability to capture a collection of bands (red, green, blue, near-infrared and shortwave infrared) through data on reflected light. The appearance of each of these bands indicates the presence of different materials in the environment. Using false color imagery can help us visualize bands we cannot see with our naked eye, and better understand what they mean.\n\nCredit to NASA, ESA, Leah Hustak (STScI)\n\n\n\n# Read in fire data\npath = fp = os.path.join(\"data\",\"California_Fire_Perimeters_(all).shp\") \n\nperimeters = gpd.read_file(path) \n\n\n\n\n\n# Explore CRS\nprint(f\"ellipsoid: {perimeters.crs.ellipsoid}\")\nprint(f\"datum: {perimeters.crs.datum}\")\nprint(f\"crs: {perimeters.crs}\")\nprint(f\"{'Is the CRS geographic?:':&lt;25} {perimeters.crs.is_geographic}\")\nprint(f\"{'Is the CRS projected?:':&lt;25} {perimeters.crs.is_projected}\")\n\nellipsoid: WGS 84\ndatum: World Geodetic System 1984 ensemble\ncrs: EPSG:3857\nIs the CRS geographic?:   False\nIs the CRS projected?:    True\n\n\n\n\n\nWe don’t want fire data for the entire state, so let’s select only for the Thomas Fire in 2017\n\n# Select for only the Thomas Fire 2017\nthomas_fire = perimeters.loc[(perimeters['FIRE_NAME'] == \"THOMAS\") &\n                                 (perimeters['YEAR_'] == 2017)]\n\n\n\n\n\n# Load in landsat data using `os` and import it using `rioxr.open_rasterio()`\nroot = os.path.join('/',\n                  'courses',\n                  'EDS220',\n                  'data',\n                  'hwk4_landsat_data')\n\nfp = os.path.join(root,\n                 'landsat8-2018-01-26-sb-simplified.nc')\n\nlandsat = rioxr.open_rasterio(fp)\n\n\n# View landsat \nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\nBecause this data is an xarray, we can simply call landsat to see information about it. Its dimensions are x:870, y:731, with one band. The data variables are red, green, blue, nir08, swir22. We can see that there is only one band, so we can get rid of the band dimension\n\n# Drop band dimensions and remove coordinates associated to band\nlandsat = landsat.squeeze()\nlandsat = landsat.drop_vars('band')\n# Print to confirm results\nprint(landsat.dims, landsat.coords)\n\nFrozenMappingWarningOnValuesAccess({'x': 870, 'y': 731}) Coordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\n\n\n\n\n\nIndex the colors in the order to create a true color image\n\n# Add robust = True to view true color RGB image\nlandsat[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow(robust = True)\n\n\n\n\n\n\n\n\nWith the true color image, our entire plot looks very monochromatic. It’s not possible to see the effects of the Thomas Fire, as all of the land looks extremely similar. In order to get any information from our plot, we need to switch our image to false color."
  },
  {
    "objectID": "posts/Thomas_fire_post/Thomas_fire_post.html#false-color-image",
    "href": "posts/Thomas_fire_post/Thomas_fire_post.html#false-color-image",
    "title": "Impacts of the Thomas Fire",
    "section": "",
    "text": "Our false color image will plot the short-wave infrared (swir22), near-infrared, and red variables (in that order).\n\n# Plot false color image\nlandsat[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(robust = True)"
  },
  {
    "objectID": "posts/Thomas_fire_post/Thomas_fire_post.html#map-our-false-color-imagery",
    "href": "posts/Thomas_fire_post/Thomas_fire_post.html#map-our-false-color-imagery",
    "title": "Impacts of the Thomas Fire",
    "section": "",
    "text": "Create a map showing the shortwave infrared/near-infrared/red false color image together with the Thomas Fire. This will allow us to understand what fire scars we are seeing in the environment.\nWhenever we combine spatial data we have to check that the CRSs match, and reproject if they do not.\n\n# Examine CRss\nprint('thomas_fire CRS: ', thomas_fire.crs)\nprint('landsat CRS: ', landsat.rio.crs)\n\nthomas_fire CRS:  EPSG:3857\nlandsat CRS:  EPSG:32611\n\n\n\n# Reproject thomas_fire to landsat crs\nthomas_fire = thomas_fire.to_crs(landsat.rio.crs)\n\nIn addition to layering the perimeter data on top of the landsat data, we also want to “zoom in” on the area we are interested in. We will clip the landsat data to the Thomas fire bounds using .rio.clip_box()\n\n# Clip data\nlandsat_small = landsat.rio.clip_box(*thomas_fire.total_bounds)\n\nLet’s finally create a clean plot of our false color image.\n\n# Set aspect ratio\nlandsat_aspect_ratio = landsat.rio.width / landsat.rio.height\n\n# Plot clipped data\nfig, ax = plt.subplots(figsize=(6, 6 * landsat_aspect_ratio))  \nlandsat_small[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(robust = True, ax=ax)\nthomas_fire.boundary.plot(ax=ax, linewidth=1, edgecolor='black', label = \"Thomas Fire Perimeter\")\n\nax.set_axis_off()\nax.set_title('False Color Imagery Map of the 2017\\nThomas Fire in Ventura and Santa Barbara County')\nfig.text(0.5, 0.27, 'Data Source: CAL FIRE via Data.gov & Microsoft Planetary Computer Data Catalogue', ha='center', va='center', fontsize=8, color='black', fontstyle='italic') \nfig.text(0.5, 0.25, 'Date Accessed: 11/22/24', ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nax.legend(loc='upper right')\nfig.savefig('landsat_map_thomas_fire.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\n\nFalse color imagery is being used to show the scar from the 2017 Thomas Fire. We can see that the color is significantly different inside the Thomas Fire Perimeter. The difference in color indicates a difference in vegetation (ie. dead vs alive) which more easily shows us the effects of the Thomas Fire than a true color image would.\nLet’s break down the false color image:|\nThe red represents shortwave infrared wavelengths which is shown on the far right side of the figure, after the 2,000 nanometer mark. We can see that the shortwave infrared shows mostly dry soil. That means that where we are seeing red on our map, that is dry soil, meaning a lack of living vegetation.\nThe green represents near-infrared wavelengths, which is shown on the figure between wavelengths of 850 t0 880. We can see that the near-infrared wavelengths show mostly healthy vegetation. That means that where we are seeing green on our map, that is vegetation, meaning a lack of fire scars.\nThe blue represents red. We don’t see any blue in our image, so we do not need to worry about its reflectance."
  },
  {
    "objectID": "delete-later/practice.html",
    "href": "delete-later/practice.html",
    "title": "Here is my level one header",
    "section": "",
    "text": "Here is my level one header\nHere is my first paragraph\nHere is my second paragraph, where you can read more about MEDS.\nThis is very important text!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "I’m a full time Master’s student in Environmental Data Science at the Bren School of Environmental Science and Management at UC Santa Barbara. In undergrad, I majored in Environmental Science, Policy, and Justice at the Johnston Center for Integrative Studies at the University of Redlands. I created my personalized major because I loved environmental studies and social activism. I took classes on anything from Environmental Ethics to History of Disability to Biodiversity to Immigration Politics and Policy. I loved having the freedom to choose what I wanted to learn and pursue. In undergrad I also studied abroad in Copenhagen where I had the chance to study ice cores and glacial dating, as well as learn about the geopolitics of Denmark. My passion and excitement about environmental policy and environmental justice drove me to go back to school. I truly believe that data science is needed and connected to all disciplines, and in learning data science skills I hope to begin to do my part to rectify the damage we have done to our Earth and the people living there."
  },
  {
    "objectID": "about.html#who-am-i",
    "href": "about.html#who-am-i",
    "title": "About Me",
    "section": "",
    "text": "I’m a full time Master’s student in Environmental Data Science at the Bren School of Environmental Science and Management at UC Santa Barbara. In undergrad, I majored in Environmental Science, Policy, and Justice at the Johnston Center for Integrative Studies at the University of Redlands. I created my personalized major because I loved environmental studies and social activism. I took classes on anything from Environmental Ethics to History of Disability to Biodiversity to Immigration Politics and Policy. I loved having the freedom to choose what I wanted to learn and pursue. In undergrad I also studied abroad in Copenhagen where I had the chance to study ice cores and glacial dating, as well as learn about the geopolitics of Denmark. My passion and excitement about environmental policy and environmental justice drove me to go back to school. I truly believe that data science is needed and connected to all disciplines, and in learning data science skills I hope to begin to do my part to rectify the damage we have done to our Earth and the people living there."
  },
  {
    "objectID": "about.html#but-who-am-i-really",
    "href": "about.html#but-who-am-i-really",
    "title": "About Me",
    "section": " But who am I really?",
    "text": "But who am I really?\nOutside of my love for the environment and data science, my main hobby is reading ( you know you’re a nerd when your two passions are coding and reading 🤓). Apart from staring at a screen or a book, I love to kayak, swim, paddle board, and hike. I am originally from Seattle, WA where I was surrounded by the vast nature of the Cascades, the Olympics, and the Puget Sound. I grew up going to summer camps on islands, raising salmon in school, and cannon-balling off diving boards in my neighborhood lake. In 2024 I moved to Santa Barbara to pursue my Master’s degree, where (thank goodness) I am still surrounded by mountains and ocean and my home is full of books."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Emma Bea Mitchell",
    "section": "",
    "text": "I’m an Environmental Data Science Master student at the Bren School of Environmental Science and Management at UCSB. I graduated from the University of Redlands in 2022, where I majored in Environmental Science, Policy and Justice. I am following my Environmental Justice passion by learning to utilize the power of computer programming to communicate and help repair the harmful impacts of dangerous environmental decisions on people and the environment."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "Impacts of the Thomas Fire\n\n\n\nPython\n\n\nMEDS\n\n\n\nVisualizing AQI and fire scars with plots and false color imagery\n\n\n\nEmma Bea Mitchell\n\n\nDec 4, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]